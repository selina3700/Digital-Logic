CHIP Xnor16 {
    IN 
        a[16],  // First 16-bit input
        b[16];  // Second 16-bit input
    OUT 
        out[16]; // 16-bit output representing the bitwise XNOR of `a` and `b`

    PARTS:
    // Perform bitwise XNOR using NOT and XOR gates for each bit
        Xor(a=a[0], b=b[0], out=out0);
        Not(in=out0, out=out[0]);

        Xor(a=a[1], b=b[1], out=out1);
        Not(in=out1, out=out[1]);

        Xor(a=a[2], b=b[2], out=out2);
        Not(in=out2, out=out[2]);

        Xor(a=a[3], b=b[3], out=out3);
        Not(in=out3, out=out[3]);

        Xor(a=a[4], b=b[4], out=out4);
        Not(in=out4, out=out[4]);

        Xor(a=a[5], b=b[5], out=out5);
        Not(in=out5, out=out[5]);

        Xor(a=a[6], b=b[6], out=out6);
        Not(in=out6, out=out[6]);

        Xor(a=a[7], b=b[7], out=out7);
        Not(in=out7, out=out[7]);

        Xor(a=a[8], b=b[8], out=out8);
        Not(in=out8, out=out[8]);

        Xor(a=a[9], b=b[9], out=out9);
        Not(in=out9, out=out[9]);

        Xor(a=a[10], b=b[10], out=out10);
        Not(in=out10, out=out[10]);

        Xor(a=a[11], b=b[11], out=out11);
        Not(in=out11, out=out[11]);

        Xor(a=a[12], b=b[12], out=out12);
        Not(in=out12, out=out[12]);

        Xor(a=a[13], b=b[13], out=out13);
        Not(in=out13, out=out[13]);

        Xor(a=a[14], b=b[14], out=out14);
        Not(in=out14, out=out[14]);

        Xor(a=a[15], b=b[15], out=out15);
        Not(in=out15, out=out[15]);
}
