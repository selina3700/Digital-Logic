// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and execute instructions written in the Hack machine language.
 * In particular, functions as follows:
  *          Executes the inputted instruction according to the Hack machine language specification. 
  *          The D and A in the language specification refer to CPU-resident registers, 
  *          while M refers to the external memory location addressed by A, i.e. to Memory[A]. 
 * The inM input holds the value of this location
 * If the current instruction needs to write a value to M, the value is placed in outM, 
 *      the address of the target location is placed in the addressM output, and the 
 *      writeM control bit is asserted. (When writeM=0, any value may appear in outM). 
 * The outM and writeM outputs are combinational: 
 *      they are affected instantaneously by the execution of the current instruction. 
 * The addressM and pc outputs are clocked: although they are affected by the execution of the current instruction, 
 * they commit to their new values only in the next time unit
 * If reset=1 then the CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather     than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Implement the CPU based on its following functionalities

    //Instruction decode
	Not(in=instruction[15], out=NotI);
	Or(a=NotI, b=instruction[5], out=loadRA);

    //A register and input mux
    Mux16(a=outALU, b=instruction, sel=NotI, out=inMux);
    ARegister(in=inMux, load=loadRA, out=RegA, out[0..14]=addressM);

    //ALU and input mux
    Mux16(a=RegA, b=inM, sel=instruction[12], out=MuxA);
    ALU(x=RegD, y=MuxA, 
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        out=outALU, out=outM, zr=zr, ng=ng);

    //D register
    And(a=instruction[15], b=instruction[4], out=ANDOpD);
    DRegister(in=outALU,load=ANDOpD,out=RegD);

    //PC with jump test
    //j3
    Or(a=ng, b=zr, out=orNgZr);
    Not(in=orNgZr, out=nNgZr);
	And(a=nNgZr, b=instruction[0], out=jgt);

    //j2
	And(a=zr, b=instruction[1], out=jeq);
        
    //j1
	And(a=ng, b=instruction[2], out=jlt);

    Or(a=jlt, b=jeq, out=ldr1);
	Or(a=ldr1,b=jgt, out=ldr2);
    And(a=instruction[15], b=ldr2, out=load);

    PC(in=RegA, load=load, inc=true, reset=reset, out[0..14]=pc);

    //writeM
    And(a=instruction[15], b=instruction[3],out=writeM);
}